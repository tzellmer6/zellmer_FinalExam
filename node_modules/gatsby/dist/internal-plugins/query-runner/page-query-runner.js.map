{"version":3,"sources":["../../../src/internal-plugins/query-runner/page-query-runner.js"],"names":["_","require","async","store","emitter","queryRunner","queuedDirtyActions","active","exports","runQueries","uniq","a","payload","id","dirtyIds","findDirtyIds","runQueriesForIds","cleanIds","findIdsWithoutDataDependencies","on","push","action","node","runQueuedActions","seenIdsWithoutDataDependencies","state","getState","allTrackedIds","flatten","concat","values","componentDataDependencies","nodes","connections","notTrackedIds","difference","pages","map","p","path","layouts","l","ids","length","Promise","resolve","reject","mapLimit","callback","pagesAndLayouts","plObj","find","pl","components","component","then","result","error","actions","reduce","internal","type","compact"],"mappings":"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","file":"page-query-runner.js","sourcesContent":["/**\n * Jobs of this module\n * - Ensure on bootstrap that all invalid page queries are run and report\n *   when this is done\n * - Watch for when a page's query is invalidated and re-run it.\n */\n\nconst _ = require(`lodash`)\nconst async = require(`async`)\n\nconst { store, emitter } = require(`../../redux`)\nconst queryRunner = require(`./query-runner`)\n\nlet queuedDirtyActions = []\nlet active = false\n\n// Do initial run of graphql queries during bootstrap.\n// Afterwards we listen \"API_RUNNING_QUEUE_EMPTY\" and check\n// for dirty nodes before running queries.\nexports.runQueries = async () => {\n  // Run queued dirty nodes now that we're active.\n  queuedDirtyActions = _.uniq(queuedDirtyActions, a => a.payload.id)\n  const dirtyIds = findDirtyIds(queuedDirtyActions)\n  await runQueriesForIds(dirtyIds)\n\n  queuedDirtyActions = []\n\n  // Find ids without data dependencies (i.e. no queries have been run for\n  // them before) and run them.\n  const cleanIds = findIdsWithoutDataDependencies()\n\n  // Run these pages\n  await runQueriesForIds(cleanIds)\n\n  active = true\n  return\n}\n\nemitter.on(`CREATE_NODE`, action => {\n  queuedDirtyActions.push(action)\n})\n\nemitter.on(`DELETE_NODE`, action => {\n  queuedDirtyActions.push({ payload: action.node })\n})\n\nconst runQueuedActions = async () => {\n  if (active) {\n    queuedDirtyActions = _.uniq(queuedDirtyActions, a => a.payload.id)\n    await runQueriesForIds(findDirtyIds(queuedDirtyActions))\n    queuedDirtyActions = []\n\n    // Find ids without data dependencies (e.g. new pages) and run\n    // their queries.\n    const cleanIds = findIdsWithoutDataDependencies()\n    runQueriesForIds(cleanIds)\n  }\n}\n\n// Wait until all plugins have finished running (e.g. various\n// transformer plugins) before running queries so we don't\n// query things in a 1/2 finished state.\nemitter.on(`API_RUNNING_QUEUE_EMPTY`, runQueuedActions)\n\nlet seenIdsWithoutDataDependencies = []\nconst findIdsWithoutDataDependencies = () => {\n  const state = store.getState()\n  const allTrackedIds = _.uniq(\n    _.flatten(\n      _.concat(\n        _.values(state.componentDataDependencies.nodes),\n        _.values(state.componentDataDependencies.connections)\n      )\n    )\n  )\n\n  // Get list of paths not already tracked and run the queries for these\n  // paths.\n  const notTrackedIds = _.difference(\n    [\n      ...state.pages.map(p => p.path),\n      ...state.layouts.map(l => `LAYOUT___${l.id}`),\n    ],\n    [...allTrackedIds, ...seenIdsWithoutDataDependencies]\n  )\n\n  // Add new IDs to our seen array so we don't keep trying to run queries for them.\n  // Pages/Layouts without queries can't be tracked.\n  seenIdsWithoutDataDependencies = _.uniq([\n    ...notTrackedIds,\n    ...seenIdsWithoutDataDependencies,\n  ])\n\n  return notTrackedIds\n}\n\nconst runQueriesForIds = ids => {\n  ids = _.uniq(ids)\n  if (ids.length < 1) {\n    return Promise.resolve()\n  }\n  const state = store.getState()\n\n  return new Promise((resolve, reject) => {\n    async.mapLimit(\n      ids,\n      4,\n      (id, callback) => {\n        const pagesAndLayouts = [...state.pages, ...state.layouts]\n        const plObj = pagesAndLayouts.find(\n          pl => pl.path === id || `LAYOUT___${pl.id}` === id\n        )\n        if (plObj) {\n          return queryRunner(plObj, state.components[plObj.component]).then(\n            result => callback(null, result),\n            error => callback(error)\n          )\n        } else {\n          return callback(null, null)\n        }\n      },\n      (error, result) => {\n        error ? reject(error) : resolve(result)\n      }\n    )\n  })\n}\n\nconst findDirtyIds = actions => {\n  const state = store.getState()\n  return actions.reduce((dirtyIds, action) => {\n    const node = action.payload\n\n    // find invalid pagesAndLayouts\n    dirtyIds = dirtyIds.concat(state.componentDataDependencies.nodes[node.id])\n\n    // Find invalid connections\n    dirtyIds = dirtyIds.concat(\n      state.componentDataDependencies.connections[node.internal.type]\n    )\n\n    return _.compact(dirtyIds)\n  }, [])\n}\n"]}