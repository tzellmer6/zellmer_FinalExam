{"keys":[{"id":"transformer-remark-markdown-ast-0b89d082e02fa93ef1c4e05ebf299ba8-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/lesson-4\"\ndate: \"2018-12-18\"\ntitle: \"Python for Data Science\"\nexcerpt: \"\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":94},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Python is a general-purpose programming language that is becoming more and more popular for doing data science. Companies worldwide are using Python to harvest insights from their data and get a competitive edge. Unlike any other Python tutorial, this course focuses on Python specifically for data science. In our Intro to Python class, you will learn about powerful ways to store and manipulate data as well as cool data science tools to start your own analyses.","position":{"start":{"line":8,"column":1,"offset":98},"end":{"line":8,"column":465,"offset":562},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":98},"end":{"line":8,"column":465,"offset":562},"indent":[]}},{"type":"html","value":"<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/T5pRlIbr6gg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>","position":{"start":{"line":11,"column":1,"offset":568},"end":{"line":13,"column":10,"offset":773},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":14,"column":1,"offset":775}}}},{"id":"transformer-remark-markdown-ast-42915a7dfa625d8da5aa045a583f14c1-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/lesson-3\"\ndate: \"2018-12-17\"\ntitle: \"Python and Math\"\nexcerpt: \"\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":86},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Every programming language has some kind of way of doing numbers and math. Do not worry: programmers lie frequently about being math geniuses when they really aren't. If they were math geniuses, they would be doing math, not writing buggy web frameworks so they can drive race cars.","position":{"start":{"line":8,"column":1,"offset":90},"end":{"line":8,"column":283,"offset":372},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":90},"end":{"line":8,"column":283,"offset":372},"indent":[]}},{"type":"html","value":"<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/BvgPM9-krOY\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>","position":{"start":{"line":11,"column":1,"offset":378},"end":{"line":13,"column":10,"offset":583},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":14,"column":1,"offset":585}}}},{"id":"transformer-remark-markdown-ast-cfc84cb3e16c9667e80278b00444cc24-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/lesson-2\"\ndate: \"2018-12-16\"\ntitle: \"Python for Finance\"\nexcerpt: \"\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":89},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The financial industry is increasingly adopting Python for general-purpose programming and quantitative analysis, ranging from understanding trading dynamics to risk management systems. This course focuses specifically on introducing Python for financial analysis. Using practical examples, you will learn the fundamentals of Python data structures such as lists and arrays and learn powerful ways to store and manipulate financial data to identify trends.","position":{"start":{"line":8,"column":1,"offset":93},"end":{"line":8,"column":457,"offset":549},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":93},"end":{"line":8,"column":457,"offset":549},"indent":[]}},{"type":"html","value":"<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/2BrpKpWwT2A\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>","position":{"start":{"line":10,"column":1,"offset":553},"end":{"line":12,"column":10,"offset":758},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":13,"column":1,"offset":760}}}},{"id":"transformer-remark-markdown-ast-1cf3754409b61b81d6e0cdff4b57890f-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/intro-post\"\ndate: \"2018-12-15\"\ntitle: \"Python Basics\"\nexcerpt: \"\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":81},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Python source files use the \".py\" extension and are called \"modules.\" With a Python module hello.py, the easiest way to run it is with the shell command \"python hello.py Alice\" which calls the Python interpreter to execute the code in hello.py, passing it the command line argument \"Alice\". See the official docs page on all the different options you have when running Python from the command-line.","position":{"start":{"line":8,"column":1,"offset":83},"end":{"line":8,"column":399,"offset":481},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":83},"end":{"line":8,"column":399,"offset":481},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's a very simple hello.py program (notice that blocks of code are delimited strictly using indentation rather than curly braces â€” more on this later!):","position":{"start":{"line":10,"column":1,"offset":483},"end":{"line":10,"column":156,"offset":638},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":483},"end":{"line":10,"column":156,"offset":638},"indent":[]}},{"type":"html","value":"<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/kLZuut1fYzQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>","position":{"start":{"line":13,"column":1,"offset":641},"end":{"line":15,"column":10,"offset":844},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":16,"column":1,"offset":845}}}},{"id":"transformer-remark-markdown-ast-80ea1ae574614705d56fd067d9ef06fa-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/lesson-1\"\ndate: \"2018-12-15\"\ntitle: \"Intro to Python\"\nexcerpt: \"\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":81},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Python is a dynamic, interpreted (bytecode-compiled) language. There are no type declarations of variables, parameters, functions, or methods in source code. This makes the code short and flexible, and you lose the compile-time type checking of the source code. Python tracks the types of all values at runtime and flags code that does not make sense as it runs.","position":{"start":{"line":8,"column":1,"offset":83},"end":{"line":8,"column":363,"offset":445},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":83},"end":{"line":8,"column":363,"offset":445},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An excellent way to see how Python code works is to run the Python interpreter and type code right into it. If you ever have a question like, \"What happens if I add an int to a list?\" Just typing it into the Python interpreter is a fast and likely the best way to see what happens. (See below to see what really happens!)","position":{"start":{"line":10,"column":1,"offset":447},"end":{"line":10,"column":322,"offset":768},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":447},"end":{"line":10,"column":322,"offset":768},"indent":[]}},{"type":"html","value":"<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/1F_OgqRuSdI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>","position":{"start":{"line":12,"column":1,"offset":770},"end":{"line":14,"column":10,"offset":973},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":15,"column":1,"offset":974}}}},{"id":"transformer-remark-markdown-html-0b89d082e02fa93ef1c4e05ebf299ba8-","value":"<p>Python is a general-purpose programming language that is becoming more and more popular for doing data science. Companies worldwide are using Python to harvest insights from their data and get a competitive edge. Unlike any other Python tutorial, this course focuses on Python specifically for data science. In our Intro to Python class, you will learn about powerful ways to store and manipulate data as well as cool data science tools to start your own analyses.</p>\n<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/T5pRlIbr6gg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>"},{"id":"transformer-remark-markdown-html-42915a7dfa625d8da5aa045a583f14c1-","value":"<p>Every programming language has some kind of way of doing numbers and math. Do not worry: programmers lie frequently about being math geniuses when they really aren't. If they were math geniuses, they would be doing math, not writing buggy web frameworks so they can drive race cars.</p>\n<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/BvgPM9-krOY\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>"},{"id":"transformer-remark-markdown-html-cfc84cb3e16c9667e80278b00444cc24-","value":"<p>The financial industry is increasingly adopting Python for general-purpose programming and quantitative analysis, ranging from understanding trading dynamics to risk management systems. This course focuses specifically on introducing Python for financial analysis. Using practical examples, you will learn the fundamentals of Python data structures such as lists and arrays and learn powerful ways to store and manipulate financial data to identify trends.</p>\n<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/2BrpKpWwT2A\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>"},{"id":"transformer-remark-markdown-html-1cf3754409b61b81d6e0cdff4b57890f-","value":"<p>Python source files use the \".py\" extension and are called \"modules.\" With a Python module hello.py, the easiest way to run it is with the shell command \"python hello.py Alice\" which calls the Python interpreter to execute the code in hello.py, passing it the command line argument \"Alice\". See the official docs page on all the different options you have when running Python from the command-line.</p>\n<p>Here's a very simple hello.py program (notice that blocks of code are delimited strictly using indentation rather than curly braces â€” more on this later!):</p>\n<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/kLZuut1fYzQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>"},{"id":"transformer-remark-markdown-html-80ea1ae574614705d56fd067d9ef06fa-","value":"<p>Python is a dynamic, interpreted (bytecode-compiled) language. There are no type declarations of variables, parameters, functions, or methods in source code. This makes the code short and flexible, and you lose the compile-time type checking of the source code. Python tracks the types of all values at runtime and flags code that does not make sense as it runs.</p>\n<p>An excellent way to see how Python code works is to run the Python interpreter and type code right into it. If you ever have a question like, \"What happens if I add an int to a list?\" Just typing it into the Python interpreter is a fast and likely the best way to see what happens. (See below to see what really happens!)</p>\n<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/1F_OgqRuSdI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>"},{"id":"transformer-remark-markdown-ast-9eecc934bb82474f0000c2811288db3c-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/intro-post\"\ndate: \"2018-12-15\"\ntitle: \"Python Basics\"\nexcerpt: \"\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":81},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Python source files use the \".py\" extension and are called \"modules.\" With a Python module hello.py, the easiest way to run it is with the shell command \"python hello.py Alice\" which calls the Python interpreter to execute the code in hello.py, passing it the command line argument \"Alice\". See the official docs page on all the different options you have when running Python from the command-line.","position":{"start":{"line":8,"column":1,"offset":83},"end":{"line":8,"column":399,"offset":481},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":83},"end":{"line":8,"column":399,"offset":481},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's a very simple hello.py program (notice that blocks of code are delimited strictly using indentation rather than curly braces â€” more on this later!):","position":{"start":{"line":10,"column":1,"offset":483},"end":{"line":10,"column":156,"offset":638},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":483},"end":{"line":10,"column":156,"offset":638},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"{\n  x = 1\n  if x == 1:\n    # indented four spaces\n    print(\"x is 1.\")\n}","position":{"start":{"line":12,"column":1,"offset":640},"end":{"line":17,"column":2,"offset":712},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":12,"column":1,"offset":640},"end":{"line":17,"column":2,"offset":712},"indent":[1,1,1,1,1]}},{"type":"html","value":"<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/kLZuut1fYzQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>","position":{"start":{"line":19,"column":1,"offset":714},"end":{"line":21,"column":10,"offset":917},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":22,"column":1,"offset":918}}}},{"id":"transformer-remark-markdown-html-9eecc934bb82474f0000c2811288db3c-","value":"<p>Python source files use the \".py\" extension and are called \"modules.\" With a Python module hello.py, the easiest way to run it is with the shell command \"python hello.py Alice\" which calls the Python interpreter to execute the code in hello.py, passing it the command line argument \"Alice\". See the official docs page on all the different options you have when running Python from the command-line.</p>\n<p>Here's a very simple hello.py program (notice that blocks of code are delimited strictly using indentation rather than curly braces â€” more on this later!):</p>\n<p>{\nx = 1\nif x == 1:\n# indented four spaces\nprint(\"x is 1.\")\n}</p>\n<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/kLZuut1fYzQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>"},{"id":"transformer-remark-markdown-ast-925c5cf10f851a95bf7c32dab8541e11-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/intro-post\"\ndate: \"2018-12-15\"\ntitle: \"Python Basics\"\nexcerpt: \"\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":81},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Python source files use the \".py\" extension and are called \"modules.\" With a Python module hello.py, the easiest way to run it is with the shell command \"python hello.py Alice\" which calls the Python interpreter to execute the code in hello.py, passing it the command line argument \"Alice\". See the official docs page on all the different options you have when running Python from the command-line.","position":{"start":{"line":8,"column":1,"offset":83},"end":{"line":8,"column":399,"offset":481},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":83},"end":{"line":8,"column":399,"offset":481},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's a very simple hello.py program (notice that blocks of code are delimited strictly using indentation rather than curly braces â€” more on this later!):","position":{"start":{"line":10,"column":1,"offset":483},"end":{"line":10,"column":156,"offset":638},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":483},"end":{"line":10,"column":156,"offset":638},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"{\n      resolve: ","position":{"start":{"line":12,"column":1,"offset":640},"end":{"line":13,"column":16,"offset":657},"indent":[1]}},{"type":"inlineCode","value":"gatsby-source-filesystem","position":{"start":{"line":13,"column":16,"offset":657},"end":{"line":13,"column":42,"offset":683},"indent":[]}},{"type":"text","value":",\n      options: {\n        path: ","position":{"start":{"line":13,"column":42,"offset":683},"end":{"line":15,"column":15,"offset":716},"indent":[1,1]}},{"type":"inlineCode","value":"${__dirname}/src/pages","position":{"start":{"line":15,"column":15,"offset":716},"end":{"line":15,"column":39,"offset":740},"indent":[]}},{"type":"text","value":",\n        name: \"pages\",\n      },\n    }","position":{"start":{"line":15,"column":39,"offset":740},"end":{"line":18,"column":6,"offset":779},"indent":[1,1,1]}}],"position":{"start":{"line":12,"column":1,"offset":640},"end":{"line":18,"column":6,"offset":779},"indent":[1,1,1,1,1,1]}},{"type":"html","value":"<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/kLZuut1fYzQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>","position":{"start":{"line":20,"column":1,"offset":781},"end":{"line":22,"column":10,"offset":984},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":23,"column":1,"offset":985}}}},{"id":"transformer-remark-markdown-html-925c5cf10f851a95bf7c32dab8541e11-","value":"<p>Python source files use the \".py\" extension and are called \"modules.\" With a Python module hello.py, the easiest way to run it is with the shell command \"python hello.py Alice\" which calls the Python interpreter to execute the code in hello.py, passing it the command line argument \"Alice\". See the official docs page on all the different options you have when running Python from the command-line.</p>\n<p>Here's a very simple hello.py program (notice that blocks of code are delimited strictly using indentation rather than curly braces â€” more on this later!):</p>\n<p>{\nresolve: <code>gatsby-source-filesystem</code>,\noptions: {\npath: <code>${__dirname}/src/pages</code>,\nname: \"pages\",\n},\n}</p>\n<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/kLZuut1fYzQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>"},{"id":"transformer-remark-markdown-ast-ed89d6aa46dacac238bab94f33753c0d-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/intro-post\"\ndate: \"2018-12-15\"\ntitle: \"Python Basics\"\nexcerpt: \"\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":81},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Python source files use the \".py\" extension and are called \"modules.\" With a Python module hello.py, the easiest way to run it is with the shell command \"python hello.py Alice\" which calls the Python interpreter to execute the code in hello.py, passing it the command line argument \"Alice\". See the official docs page on all the different options you have when running Python from the command-line.","position":{"start":{"line":8,"column":1,"offset":83},"end":{"line":8,"column":399,"offset":481},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":83},"end":{"line":8,"column":399,"offset":481},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's a very simple hello.py program (notice that blocks of code are delimited strictly using indentation rather than curly braces â€” more on this later!):","position":{"start":{"line":10,"column":1,"offset":483},"end":{"line":10,"column":156,"offset":638},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":483},"end":{"line":10,"column":156,"offset":638},"indent":[]}},{"type":"html","value":"<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/kLZuut1fYzQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>","position":{"start":{"line":12,"column":1,"offset":640},"end":{"line":14,"column":10,"offset":843},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":15,"column":1,"offset":844}}}},{"id":"transformer-remark-markdown-html-ed89d6aa46dacac238bab94f33753c0d-","value":"<p>Python source files use the \".py\" extension and are called \"modules.\" With a Python module hello.py, the easiest way to run it is with the shell command \"python hello.py Alice\" which calls the Python interpreter to execute the code in hello.py, passing it the command line argument \"Alice\". See the official docs page on all the different options you have when running Python from the command-line.</p>\n<p>Here's a very simple hello.py program (notice that blocks of code are delimited strictly using indentation rather than curly braces â€” more on this later!):</p>\n<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/kLZuut1fYzQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>"},{"id":"transformer-remark-markdown-ast-bd03beaa08200d388aa99985fc18ed21-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/intro-post\"\ndate: \"2018-12-15\"\ntitle: \"Python Basics\"\nexcerpt: \"\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":81},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Python source files use the \".py\" extension and are called \"modules.\" With a Python module hello.py, the easiest way to run it is with the shell command \"python hello.py Alice\" which calls the Python interpreter to execute the code in hello.py, passing it the command line argument \"Alice\". See the official docs page on all the different options you have when running Python from the command-line.","position":{"start":{"line":8,"column":1,"offset":83},"end":{"line":8,"column":399,"offset":481},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":83},"end":{"line":8,"column":399,"offset":481},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's a very simple hello.py program (notice that blocks of code are delimited strictly using indentation rather than curly braces â€” more on this later!):","position":{"start":{"line":10,"column":1,"offset":483},"end":{"line":10,"column":156,"offset":638},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":483},"end":{"line":10,"column":156,"offset":638},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"{\n    resolve: ","position":{"start":{"line":12,"column":1,"offset":640},"end":{"line":13,"column":14,"offset":655},"indent":[1]}},{"type":"inlineCode","value":"gatsby-transformer-remark","position":{"start":{"line":13,"column":14,"offset":655},"end":{"line":13,"column":41,"offset":682},"indent":[]}},{"type":"text","value":",\n    options: {\n      plugins: ","position":{"start":{"line":13,"column":41,"offset":682},"end":{"line":15,"column":16,"offset":714},"indent":[1,1]}},{"type":"linkReference","identifier":" `gatsby-remark-prismjs`, ","referenceType":"shortcut","children":[{"type":"text","value":"\n        ","position":{"start":{"line":15,"column":17,"offset":715},"end":{"line":16,"column":9,"offset":724},"indent":[1]}},{"type":"inlineCode","value":"gatsby-remark-prismjs","position":{"start":{"line":16,"column":9,"offset":724},"end":{"line":16,"column":32,"offset":747},"indent":[]}},{"type":"text","value":",\n      ","position":{"start":{"line":16,"column":32,"offset":747},"end":{"line":17,"column":7,"offset":755},"indent":[1]}}],"position":{"start":{"line":15,"column":16,"offset":714},"end":{"line":17,"column":8,"offset":756},"indent":[1,1]}},{"type":"text","value":"\n    }\n  }","position":{"start":{"line":17,"column":8,"offset":756},"end":{"line":19,"column":4,"offset":766},"indent":[1,1]}}],"position":{"start":{"line":12,"column":1,"offset":640},"end":{"line":19,"column":4,"offset":766},"indent":[1,1,1,1,1,1,1]}},{"type":"html","value":"<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/kLZuut1fYzQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>","position":{"start":{"line":21,"column":1,"offset":768},"end":{"line":23,"column":10,"offset":971},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":24,"column":1,"offset":972}}}},{"id":"transformer-remark-markdown-html-bd03beaa08200d388aa99985fc18ed21-","value":"<p>Python source files use the \".py\" extension and are called \"modules.\" With a Python module hello.py, the easiest way to run it is with the shell command \"python hello.py Alice\" which calls the Python interpreter to execute the code in hello.py, passing it the command line argument \"Alice\". See the official docs page on all the different options you have when running Python from the command-line.</p>\n<p>Here's a very simple hello.py program (notice that blocks of code are delimited strictly using indentation rather than curly braces â€” more on this later!):</p>\n<p>{\nresolve: <code>gatsby-transformer-remark</code>,\noptions: {\nplugins: [\n<code>gatsby-remark-prismjs</code>,\n]\n}\n}</p>\n<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/kLZuut1fYzQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>"},{"id":"transformer-remark-markdown-ast-62f4cf02d1bf243899519ae1b5b3c728-","value":{"type":"root","children":[],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":1,"offset":0}}}},{"id":"transformer-remark-markdown-html-62f4cf02d1bf243899519ae1b5b3c728-","value":""},{"id":"transformer-remark-markdown-ast-8d891c331b1e90f6b9d86379af349a18-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/presentation\"\ndate: \"2018-12-19\"\ntitle: \"Presentation for Final\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":4,"offset":84},"indent":[1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":1,"offset":86}}}},{"id":"transformer-remark-markdown-html-8d891c331b1e90f6b9d86379af349a18-","value":""},{"id":"transformer-remark-markdown-ast-90f8b406f7c5ab7336e1ce6e0ce9ed0c-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/presentation\"\ndate: \"2018-12-19\"\ntitle: \"Presentation for Final\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":4,"offset":84},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.","position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.","position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebay in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created.","position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":750,"offset":1374},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":750,"offset":1374},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":12,"column":1,"offset":1376}}}},{"id":"transformer-remark-markdown-html-90f8b406f7c5ab7336e1ce6e0ce9ed0c-","value":"<p>Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.</p>\n<p>Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.</p>\n<p>The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebay in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created.</p>"},{"id":"transformer-remark-markdown-ast-e33793ee5db03cba9ace1d90829be2c1-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/presentation\"\ndate: \"2018-12-19\"\ntitle: \"Presentation for Final\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":4,"offset":84},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.","position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.","position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebay in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I beleive it is not.","position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":12,"column":1,"offset":1619}}}},{"id":"transformer-remark-markdown-html-e33793ee5db03cba9ace1d90829be2c1-","value":"<p>Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.</p>\n<p>Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.</p>\n<p>The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebay in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I beleive it is not.</p>"},{"id":"transformer-remark-markdown-ast-97b1a25e4b7778bddaaa45c4ea4eaa61-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/presentation\"\ndate: \"2018-12-19\"\ntitle: \"Presentation for Final\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":4,"offset":84},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.","position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.","position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebay in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I beleive it is not.","position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Moving on to the blog post and blog post listings, I coded my index.js page to show a list of my blogs, starting with the name, followed by date, and a small (250 character) excerpt from the blog. The website then uses graphql as a page query to show the data. Each blog posts title is able to be clicked to bring the full post into view.","position":{"start":{"line":13,"column":1,"offset":1621},"end":{"line":13,"column":339,"offset":1959},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1621},"end":{"line":13,"column":339,"offset":1959},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":14,"column":1,"offset":1961}}}},{"id":"transformer-remark-markdown-html-97b1a25e4b7778bddaaa45c4ea4eaa61-","value":"<p>Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.</p>\n<p>Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.</p>\n<p>The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebay in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I beleive it is not.</p>\n<p>Moving on to the blog post and blog post listings, I coded my index.js page to show a list of my blogs, starting with the name, followed by date, and a small (250 character) excerpt from the blog. The website then uses graphql as a page query to show the data. Each blog posts title is able to be clicked to bring the full post into view.</p>"},{"id":"transformer-remark-markdown-ast-c4a35e3947776903e74b736b3d4366cf-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/presentation\"\ndate: \"2018-12-19\"\ntitle: \"Presentation for Final\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":4,"offset":84},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.","position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.","position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebay in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I beleive it is not.","position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Moving on to the blog post and blog post listings, I coded my index.js page to show a list of my blogs, starting with the name, followed by date, and a small (250 character) excerpt from the blog. The website then uses graphql as a page query to show the data. I also use a blog-listing.css in the styles folder to style each preview. Each blog posts title is able to be clicked to bring the full post into view.","position":{"start":{"line":13,"column":1,"offset":1621},"end":{"line":13,"column":413,"offset":2033},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1621},"end":{"line":13,"column":413,"offset":2033},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":14,"column":1,"offset":2035}}}},{"id":"transformer-remark-markdown-html-c4a35e3947776903e74b736b3d4366cf-","value":"<p>Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.</p>\n<p>Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.</p>\n<p>The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebay in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I beleive it is not.</p>\n<p>Moving on to the blog post and blog post listings, I coded my index.js page to show a list of my blogs, starting with the name, followed by date, and a small (250 character) excerpt from the blog. The website then uses graphql as a page query to show the data. I also use a blog-listing.css in the styles folder to style each preview. Each blog posts title is able to be clicked to bring the full post into view.</p>"},{"id":"transformer-remark-markdown-ast-ef1ca61887a397c04ff9ba587295d54b-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/presentation\"\ndate: \"2018-12-19\"\ntitle: \"Presentation for Final\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":4,"offset":84},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.","position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.","position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebay in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I beleive it is not.","position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Moving on to the blog post and blog post listings, I coded my index.js page to show a list of my blogs, starting with the name, followed by date, and a small (250 character) excerpt from the blog. The website then uses graphql as a page query to show the data. I also use a blog-listing.css in the styles folder to style each preview. Each blog posts title is able to be clicked to bring the full post into view.","position":{"start":{"line":13,"column":1,"offset":1621},"end":{"line":13,"column":413,"offset":2033},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1621},"end":{"line":13,"column":413,"offset":2033},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once clicked on, you can view the entire blog post. I strayed away from using a website to push blog posts as the creation of a post is very straightforward. You create a folder in the pages folder, titled in this format: DD-MM-YYYY-NAME. You then create a index.md file within the folder you just created to hold data related to the post. You enter a path, date and title, and then enter the post itself. I unfortunately never got my excerpt to work correct, as I had wanted to have an excerpt that talks about what you will learn in each blog, but figured that the 250 character preview will work out fine. ","position":{"start":{"line":15,"column":1,"offset":2037},"end":{"line":15,"column":610,"offset":2646},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":2037},"end":{"line":15,"column":610,"offset":2646},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":16,"column":1,"offset":2648}}}},{"id":"transformer-remark-markdown-html-ef1ca61887a397c04ff9ba587295d54b-","value":"<p>Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.</p>\n<p>Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.</p>\n<p>The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebay in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I beleive it is not.</p>\n<p>Moving on to the blog post and blog post listings, I coded my index.js page to show a list of my blogs, starting with the name, followed by date, and a small (250 character) excerpt from the blog. The website then uses graphql as a page query to show the data. I also use a blog-listing.css in the styles folder to style each preview. Each blog posts title is able to be clicked to bring the full post into view.</p>\n<p>Once clicked on, you can view the entire blog post. I strayed away from using a website to push blog posts as the creation of a post is very straightforward. You create a folder in the pages folder, titled in this format: DD-MM-YYYY-NAME. You then create a index.md file within the folder you just created to hold data related to the post. You enter a path, date and title, and then enter the post itself. I unfortunately never got my excerpt to work correct, as I had wanted to have an excerpt that talks about what you will learn in each blog, but figured that the 250 character preview will work out fine. </p>"},{"id":"transformer-remark-markdown-ast-8a06a2bfcfdddcb735017f53d21e1e65-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/presentation\"\ndate: \"2018-12-19\"\ntitle: \"Presentation for Final\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":4,"offset":84},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.","position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.","position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebay in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I beleive it is not.","position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Moving on to the blog post and blog post listings, I coded my index.js page to show a list of my blogs, starting with the name, followed by date, and a small (250 character) excerpt from the blog. The website then uses graphql as a page query to show the data. I also use a blog-listing.css in the styles folder to style each preview. Each blog posts title is able to be clicked to bring the full post into view.","position":{"start":{"line":13,"column":1,"offset":1621},"end":{"line":13,"column":413,"offset":2033},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1621},"end":{"line":13,"column":413,"offset":2033},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once clicked on, you can view the entire blog post. I strayed away from using a website to push blog posts as the creation of a post is very straightforward. You create a folder in the pages folder, titled in this format: DD-MM-YYYY-NAME. You then create a index.md file within the folder you just created to hold data related to the post. You enter a path, date and title, and then enter the post itself. I unfortunately never got my excerpt to work correct, as I had wanted to have an excerpt that talks about what you will learn in each blog, but figured that the 250 character preview will work out fine. Each blogpost includes a youtube view that is coded with an iframe.","position":{"start":{"line":15,"column":1,"offset":2037},"end":{"line":15,"column":677,"offset":2713},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":2037},"end":{"line":15,"column":677,"offset":2713},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Overall, I had a fun time with this project. I enjoyed putting the knowledge I gained in the class to the class to the test by creating a website. There were a couple of functions that I had started to implement, but never figured out. I first attempted to add a particle background with particle.js, but had issues with it working, and when I had got it working, it frankly ruined the minimalistic aspect of the website. I also tried to implement a code block feature, where I could show code block snippets within the index.md files using prismjs, but never got that working unfortunately. Even though I had these issues, I still enjoyed the way my website turned out. ","position":{"start":{"line":17,"column":1,"offset":2717},"end":{"line":17,"column":672,"offset":3388},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":2717},"end":{"line":17,"column":672,"offset":3388},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":18,"column":1,"offset":3390}}}},{"id":"transformer-remark-markdown-html-8a06a2bfcfdddcb735017f53d21e1e65-","value":"<p>Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.</p>\n<p>Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.</p>\n<p>The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebay in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I beleive it is not.</p>\n<p>Moving on to the blog post and blog post listings, I coded my index.js page to show a list of my blogs, starting with the name, followed by date, and a small (250 character) excerpt from the blog. The website then uses graphql as a page query to show the data. I also use a blog-listing.css in the styles folder to style each preview. Each blog posts title is able to be clicked to bring the full post into view.</p>\n<p>Once clicked on, you can view the entire blog post. I strayed away from using a website to push blog posts as the creation of a post is very straightforward. You create a folder in the pages folder, titled in this format: DD-MM-YYYY-NAME. You then create a index.md file within the folder you just created to hold data related to the post. You enter a path, date and title, and then enter the post itself. I unfortunately never got my excerpt to work correct, as I had wanted to have an excerpt that talks about what you will learn in each blog, but figured that the 250 character preview will work out fine. Each blogpost includes a youtube view that is coded with an iframe.</p>\n<p>Overall, I had a fun time with this project. I enjoyed putting the knowledge I gained in the class to the class to the test by creating a website. There were a couple of functions that I had started to implement, but never figured out. I first attempted to add a particle background with particle.js, but had issues with it working, and when I had got it working, it frankly ruined the minimalistic aspect of the website. I also tried to implement a code block feature, where I could show code block snippets within the index.md files using prismjs, but never got that working unfortunately. Even though I had these issues, I still enjoyed the way my website turned out. </p>"},{"id":"transformer-remark-markdown-ast-ef77bbd63adfcd178f9a6b5aa65de1b6-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/presentation\"\ndate: \"2018-12-19\"\ntitle: \"Presentation for Final\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":4,"offset":84},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.","position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.","position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebar in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I believe it is not.","position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Moving on to the blog post and blog post listings, I coded my index.js page to show a list of my blogs, starting with the name, followed by date, and a small (250 character) excerpt from the blog. The website then uses graphql as a page query to show the data. I also use a blog-listing.css in the styles folder to style each preview. Each blog posts title is able to be clicked to bring the full post into view.","position":{"start":{"line":13,"column":1,"offset":1621},"end":{"line":13,"column":413,"offset":2033},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1621},"end":{"line":13,"column":413,"offset":2033},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once clicked on, you can view the entire blog post. I strayed away from using a website to push blog posts as the creation of a post is very straightforward. You create a folder in the pages folder, titled in this format: DD-MM-YYYY-NAME. You then create a index.md file within the folder you just created to hold data related to the post. You enter a path, date and title, and then enter the post itself. I unfortunately never got my excerpt to work correct, as I had wanted to have an excerpt that talks about what you will learn in each blog, but figured that the 250 character preview will work out fine. Each blogpost includes a youtube view that is coded with an iframe.","position":{"start":{"line":15,"column":1,"offset":2037},"end":{"line":15,"column":677,"offset":2713},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":2037},"end":{"line":15,"column":677,"offset":2713},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Overall, I had a fun time with this project. I enjoyed putting the knowledge I gained in the class to the class to the test by creating a website. There were a couple of functions that I had started to implement, but never figured out. I first attempted to add a particle background with particle.js, but had issues with it working, and when I had got it working, it frankly ruined the minimalistic aspect of the website. I also tried to implement a code block feature, where I could show code block snippets within the index.md files using prismjs, but never got that working unfortunately. Even though I had these issues, I still enjoyed the way my website turned out.","position":{"start":{"line":17,"column":1,"offset":2717},"end":{"line":17,"column":671,"offset":3387},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":2717},"end":{"line":17,"column":671,"offset":3387},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":18,"column":1,"offset":3389}}}},{"id":"transformer-remark-markdown-html-ef77bbd63adfcd178f9a6b5aa65de1b6-","value":"<p>Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.</p>\n<p>Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.</p>\n<p>The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebar in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I believe it is not.</p>\n<p>Moving on to the blog post and blog post listings, I coded my index.js page to show a list of my blogs, starting with the name, followed by date, and a small (250 character) excerpt from the blog. The website then uses graphql as a page query to show the data. I also use a blog-listing.css in the styles folder to style each preview. Each blog posts title is able to be clicked to bring the full post into view.</p>\n<p>Once clicked on, you can view the entire blog post. I strayed away from using a website to push blog posts as the creation of a post is very straightforward. You create a folder in the pages folder, titled in this format: DD-MM-YYYY-NAME. You then create a index.md file within the folder you just created to hold data related to the post. You enter a path, date and title, and then enter the post itself. I unfortunately never got my excerpt to work correct, as I had wanted to have an excerpt that talks about what you will learn in each blog, but figured that the 250 character preview will work out fine. Each blogpost includes a youtube view that is coded with an iframe.</p>\n<p>Overall, I had a fun time with this project. I enjoyed putting the knowledge I gained in the class to the class to the test by creating a website. There were a couple of functions that I had started to implement, but never figured out. I first attempted to add a particle background with particle.js, but had issues with it working, and when I had got it working, it frankly ruined the minimalistic aspect of the website. I also tried to implement a code block feature, where I could show code block snippets within the index.md files using prismjs, but never got that working unfortunately. Even though I had these issues, I still enjoyed the way my website turned out.</p>"},{"id":"transformer-remark-markdown-ast-f5ecb0857ce59ffa84c2063829b5007a-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/presentation\"\ndate: \"2018-12-19\"\ntitle: \"Presentation for Final\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":4,"offset":84},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.","position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.","position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebar in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I believe it is not.","position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Moving on to the blog post and blog post listings, I coded my index.js page to show a list of my blogs, starting with the name, followed by date, and a small (250 character) excerpt from the blog. The website then uses graphql as a page query to show the data. I also use a blog-listing.css in the styles folder to style each preview. Each blog posts title is able to be clicked to bring the full post into view.","position":{"start":{"line":13,"column":1,"offset":1621},"end":{"line":13,"column":413,"offset":2033},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1621},"end":{"line":13,"column":413,"offset":2033},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once clicked on, you can view the entire blog post. I strayed away from using a website to push blog posts as the creation of a post is very straightforward. You create a folder in the pages folder, titled in this format: DD-MM-YYYY-NAME. You then create a index.md file within the folder you just created to hold data related to the post. You enter a path, date and title, and then enter the post itself. I unfortunately never got my excerpt to work correct, as I had wanted to have an excerpt that talks about what you will learn in each blog, but figured that the 250 character preview will work out fine. Each blogpost includes a youtube view that is coded with an iframe.","position":{"start":{"line":15,"column":1,"offset":2037},"end":{"line":15,"column":677,"offset":2713},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":2037},"end":{"line":15,"column":677,"offset":2713},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I had originally wanted to create my own blog posts with information that I learned while learning python, but found myself struggling with time to create indepth demos and guides of what I have learned. I also figured that since the website is just to show off the skills I have learned in this class, that it was not a huge deal. I ended up populating each blog post with a small snippet about each video that is linked to the post. These videos are simple youtube videos relating to python and more specifically the title of each post itself. ","position":{"start":{"line":17,"column":1,"offset":2717},"end":{"line":17,"column":547,"offset":3263},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":2717},"end":{"line":17,"column":547,"offset":3263},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Overall, I had a fun time with this project. I enjoyed putting the knowledge I gained in the class to the class to the test by creating a website. There were a couple of functions that I had started to implement, but never figured out. I first attempted to add a particle background with particle.js, but had issues with it working, and when I had got it working, it frankly ruined the minimalistic aspect of the website. I also tried to implement a code block feature, where I could show code block snippets within the index.md files using prismjs, but never got that working unfortunately. Even though I had these issues, I still enjoyed the way my website turned out.","position":{"start":{"line":19,"column":1,"offset":3267},"end":{"line":19,"column":671,"offset":3937},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":3267},"end":{"line":19,"column":671,"offset":3937},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":20,"column":1,"offset":3939}}}},{"id":"transformer-remark-markdown-html-f5ecb0857ce59ffa84c2063829b5007a-","value":"<p>Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.</p>\n<p>Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.</p>\n<p>The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebar in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I believe it is not.</p>\n<p>Moving on to the blog post and blog post listings, I coded my index.js page to show a list of my blogs, starting with the name, followed by date, and a small (250 character) excerpt from the blog. The website then uses graphql as a page query to show the data. I also use a blog-listing.css in the styles folder to style each preview. Each blog posts title is able to be clicked to bring the full post into view.</p>\n<p>Once clicked on, you can view the entire blog post. I strayed away from using a website to push blog posts as the creation of a post is very straightforward. You create a folder in the pages folder, titled in this format: DD-MM-YYYY-NAME. You then create a index.md file within the folder you just created to hold data related to the post. You enter a path, date and title, and then enter the post itself. I unfortunately never got my excerpt to work correct, as I had wanted to have an excerpt that talks about what you will learn in each blog, but figured that the 250 character preview will work out fine. Each blogpost includes a youtube view that is coded with an iframe.</p>\n<p>I had originally wanted to create my own blog posts with information that I learned while learning python, but found myself struggling with time to create indepth demos and guides of what I have learned. I also figured that since the website is just to show off the skills I have learned in this class, that it was not a huge deal. I ended up populating each blog post with a small snippet about each video that is linked to the post. These videos are simple youtube videos relating to python and more specifically the title of each post itself. </p>\n<p>Overall, I had a fun time with this project. I enjoyed putting the knowledge I gained in the class to the class to the test by creating a website. There were a couple of functions that I had started to implement, but never figured out. I first attempted to add a particle background with particle.js, but had issues with it working, and when I had got it working, it frankly ruined the minimalistic aspect of the website. I also tried to implement a code block feature, where I could show code block snippets within the index.md files using prismjs, but never got that working unfortunately. Even though I had these issues, I still enjoyed the way my website turned out.</p>"},{"id":"transformer-remark-markdown-ast-54817cb4a2140e9760a0e801bba4ce64-","value":{"type":"root","children":[{"type":"yaml","value":"path: \"/presentation\"\ndate: \"2018-12-19\"\ntitle: \"Presentation for Final\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":4,"offset":84},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.","position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":235,"offset":322},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.","position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":326},"end":{"line":9,"column":296,"offset":621},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebar in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I believe it is not.","position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":625},"end":{"line":11,"column":993,"offset":1617},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Moving on to the blog post and blog post listings, I coded my index.js page to show a list of my blogs, starting with the name, followed by date, and a small (250 character) excerpt from the blog. The website then uses graphql as a page query to show the data. I also use a blog-listing.css in the styles folder to style each preview. Each blog posts title is able to be clicked to bring the full post into view.","position":{"start":{"line":13,"column":1,"offset":1621},"end":{"line":13,"column":413,"offset":2033},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1621},"end":{"line":13,"column":413,"offset":2033},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once clicked on, you can view the entire blog post. I strayed away from using a website to push blog posts as the creation of a post is very straightforward. You create a folder in the pages folder, titled in this format: DD-MM-YYYY-NAME. You then create a index.md file within the folder you just created to hold data related to the post. You enter a path, date and title, and then enter the post itself. I unfortunately never got my excerpt to work correct, as I had wanted to have an excerpt that talks about what you will learn in each blog, but figured that the 250 character preview will work out fine. Each blogpost includes a youtube view that is coded with an iframe.","position":{"start":{"line":15,"column":1,"offset":2037},"end":{"line":15,"column":677,"offset":2713},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":2037},"end":{"line":15,"column":677,"offset":2713},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I had originally wanted to create my own blog posts with information that I learned while learning python, but found myself struggling with time to create indepth demos and guides of what I have learned. I also figured that since the website is just to show off the skills I have learned in this class, that it was not a huge deal. I ended up populating each blog post with a small snippet about each video that is linked to the post. These videos are simple youtube videos relating to python and more specifically the title of each post itself.","position":{"start":{"line":17,"column":1,"offset":2717},"end":{"line":17,"column":546,"offset":3262},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":2717},"end":{"line":17,"column":546,"offset":3262},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Overall, I had a fun time with this project. I enjoyed putting the knowledge I gained in the class to the class to the test by creating a website. There were a couple of functions that I had started to implement, but never figured out. I first attempted to add a particle background with particle.js, but had issues with it working, and when I had got it working, it frankly ruined the minimalistic aspect of the website. I also tried to implement a code block feature, where I could show code block snippets within the index.md files using prismjs, but never got that working unfortunately. Even though I had these issues, I still enjoyed the way my website turned out.","position":{"start":{"line":19,"column":1,"offset":3266},"end":{"line":19,"column":671,"offset":3936},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":3266},"end":{"line":19,"column":671,"offset":3936},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":20,"column":1,"offset":3938}}}},{"id":"transformer-remark-markdown-html-54817cb4a2140e9760a0e801bba4ce64-","value":"<p>Instead of including a seperate document for my presentation, I thought it would be a cool idea to include the presentation within the website itself. I will also include the YouTube video that I created presenting this project below.</p>\n<p>Starting off, I had wanted to create a blog website that had user functions and continuous deployment by a site like Netlify. I wanted to allow users to login and logout, sign up for email access, amongst other functions. I decided against this as I wanted to focus more on the UI of my project.</p>\n<p>The end website is one I very much enjoy. I am a big fan of minimal websites, as I enjoy being able to get right to the point of what I am viewing. I started by choosing my colorways, gray and white, and ended up adding a dark blue border around the website to add some contrast. I first had wanted to have a sidebar of some kind, that would be informational to the reader. I created the sidebar in my layouts/index.js. This layouts file is where I create the props of my header and sidebar. The header is a simple line of text reading the name of my website. This also functions as a button to go back to my index.js page. The sidebar contains information on the use of the website, the creator and a small snippet about how the website is created. Both of these props are then added to a TemplateWrapper object that I use as an export. I decided against creating 2 files and folders for these objects as I mainly wanted my code to be readable and not too lengthy, which I believe it is not.</p>\n<p>Moving on to the blog post and blog post listings, I coded my index.js page to show a list of my blogs, starting with the name, followed by date, and a small (250 character) excerpt from the blog. The website then uses graphql as a page query to show the data. I also use a blog-listing.css in the styles folder to style each preview. Each blog posts title is able to be clicked to bring the full post into view.</p>\n<p>Once clicked on, you can view the entire blog post. I strayed away from using a website to push blog posts as the creation of a post is very straightforward. You create a folder in the pages folder, titled in this format: DD-MM-YYYY-NAME. You then create a index.md file within the folder you just created to hold data related to the post. You enter a path, date and title, and then enter the post itself. I unfortunately never got my excerpt to work correct, as I had wanted to have an excerpt that talks about what you will learn in each blog, but figured that the 250 character preview will work out fine. Each blogpost includes a youtube view that is coded with an iframe.</p>\n<p>I had originally wanted to create my own blog posts with information that I learned while learning python, but found myself struggling with time to create indepth demos and guides of what I have learned. I also figured that since the website is just to show off the skills I have learned in this class, that it was not a huge deal. I ended up populating each blog post with a small snippet about each video that is linked to the post. These videos are simple youtube videos relating to python and more specifically the title of each post itself.</p>\n<p>Overall, I had a fun time with this project. I enjoyed putting the knowledge I gained in the class to the class to the test by creating a website. There were a couple of functions that I had started to implement, but never figured out. I first attempted to add a particle background with particle.js, but had issues with it working, and when I had got it working, it frankly ruined the minimalistic aspect of the website. I also tried to implement a code block feature, where I could show code block snippets within the index.md files using prismjs, but never got that working unfortunately. Even though I had these issues, I still enjoyed the way my website turned out.</p>"}]}